/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 .\can.glb 
*/

import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { useGLTF, useAnimations, Html } from "@react-three/drei";
import { useThree } from "@react-three/fiber";
import GLTFMaterialsVariantsExtension from "three-gltf-extensions/loaders/KHR_materials_variants/KHR_materials_variants.js";
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";
import Image from "next/image";

export function Model(props) {
  const group = useRef();
  const canBody = useRef();
  const { nodes, materials, animations, parser } = useGLTF("/can.glb");
  const { actions } = useAnimations(animations, group);
  const [materialVar, setMaterialVar] = useState(materials.main);

  const tl = gsap.timeline();
  const { viewport } = useThree();

  const handleMaterial = (matIndex) => {
    parser.loadMaterial(matIndex).then((material) => {
      setMaterialVar(material);
    });
  };

  useLayoutEffect(() => {
    actions.CanAnime.play().paused = true;
    actions.CapAnime.play().paused = true;
    actions.OpennerAnime.play().paused = true;

    tl.to([actions.CanAnime, actions.CapAnime, actions.OpennerAnime], {
      time: actions.CanAnime.getClip().duration,
      scrollTrigger: {
        trigger: ".wrapper",
        start: "top top",
        end: "bottom bottom",
        scrub: 0.8,
        snap: {
          snapTo: 1 / 8,
          // ease: "sine.inOut",
          duration: "0.8",
        },
      },
      ease: "none",
    });

    ScrollTrigger.create({
      trigger: ".lite",
      start: "top center",
      onEnter: () => handleMaterial(2),
      onLeaveBack: () => handleMaterial(1),
      scrub: 1,
    });

    ScrollTrigger.create({
      trigger: ".original",
      start: "top center",
      onEnter: () => handleMaterial(3),
      onLeaveBack: () => handleMaterial(2),
    });

    ScrollTrigger.create({
      trigger: ".xedition",
      start: "top center",
      onEnter: () => handleMaterial(1),
      onLeaveBack: () => handleMaterial(3),
    });

    tl.fromTo(
      ".lite-bg",
      {
        objectPosition: "0 -2500px",
      },
      {
        objectPosition: "0 -100px",
        scrollTrigger: {
          trigger: ".lite",
          start: "top center",
          end: "bottom bottom",
          scrub: 5,
        },
        ease: "power1.inOut",
      }
    );

    tl.fromTo(
      ".original-bg",
      {
        objectPosition: "0 -2500px",
      },
      {
        objectPosition: "0 -100px",
        scrollTrigger: {
          trigger: ".original",
          start: "top center",
          end: "bottom bottom",
          scrub: 5,
        },
        ease: "power1.inOut",
      }
    );

    tl.fromTo(
      ".xedition-bg",
      {
        objectPosition: "0 -2500px",
      },
      {
        objectPosition: "0 -100px",
        scrollTrigger: {
          trigger: ".xedition",
          start: "top center",
          end: "bottom bottom",
          scrub: 5,
        },
        ease: "power1.inOut",
      }
    );

    tl.fromTo(
      ".lite .right",
      {
        opacity: 0,
        x: -100,
      },
      {
        opacity: 1,
        x: 0,
        scrollTrigger: {
          trigger: ".lite",
          start: "top center",
          end: "bottom bottom",
          scrub: 5,
        },
        ease: "power1.inOut",
      }
    );

    tl.fromTo(
      ".original .left",
      {
        opacity: 0,
        x: -100,
      },
      {
        opacity: 1,
        x: 0,
        scrollTrigger: {
          trigger: ".original",
          start: "top center",
          end: "bottom bottom",
          scrub: 5,
        },
        ease: "none",
      }
    );

    tl.fromTo(
      ".xedition .right",
      {
        opacity: 0,
        x: -100,
      },
      {
        opacity: 1,
        x: 0,
        scrollTrigger: {
          trigger: ".xedition",
          start: "top center",
          end: "bottom bottom",
          scrub: 5,
        },
        ease: "none",
      }
    );
  }, []);

  // useEffect(() => {
  //   let mat = 1;
  //   setInterval(() => {
  //     parser.loadMaterial(mat % 2 == 0 ? 1 : 2).then((material) => {
  //       setMaterialVar(material);
  //       mat++;
  //     });
  //   }, 1000);
  // }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Can" position={[2.64, 1.599, 0]}>
          <mesh
            ref={canBody}
            name="Mesh_2"
            geometry={nodes?.Mesh_2?.geometry}
            material={materialVar}
            onClick={() => console.log("Clicked")}
          ></mesh>
          <mesh
            name="Mesh_3"
            geometry={nodes?.Mesh_3?.geometry}
            material={materials.metal}
          />
          <mesh
            name="Cap"
            geometry={nodes?.Cap?.geometry}
            material={materials.metal}
            position={[-0.001, 1.519, 0.25]}
          />
          <mesh
            name="Openner"
            geometry={nodes?.Openner?.geometry}
            material={materials.metal}
            position={[-0.001, 1.538, -0.086]}
          />
        </group>
      </group>
    </group>
  );
}
useGLTF.preload("/can.glb", false, false, (gltf) =>
  gltf.register((parser) => new GLTFMaterialsVariantsExtension(parser))
);
